Domain GerenciarTrabalhos {
	Subdomain HuntHub
}

BoundedContext HuntHub implements HuntHub {
	Aggregate User {
		Entity User {
			aggregateRoot
			int id unique
			String cpf
			int points
			String name
			String emailAddress
			String password
		}
	}

	Aggregate Hunter  {
		Entity Hunter {
			aggregateRoot
			-User user

			String linkPortfolio
			String bio
			String profilePicture
			-List<Link> links
			-List<Task> tasks
			int levels
			int totalRating
			int ratingCount
			int avaliacao
			-List<Certificacao> certificacoes
			-List<Achievement> achievements
			-List<Projeto> projetos

		}

		ValueObject Competencia {
			String nome
		}

		ValueObject Achievement {
			String nome
		}

		ValueObject Link {
			String link
		}

		Entity Projeto {
			-List<Competencia> competencias
			Date startDate
			Date endDate
			String descriptions
			String name
		}

		ValueObject Certificacao {
			String name
		}

		Service HunterService {
			void ratePO(@ProductOwner po, int rating);
			void rateHunter(@Hunter hunter, int rating);
		}
	}
	Aggregate ProductOwner {
		Entity ProductOwner {
			aggregateRoot
			-User user
			int levels
			int rating
			int totalRating
			int ratingCount
			-List<Task> tasks
			String bio
			String profilePicture
		}

		Service POService {
			void rateHunter(@Hunter hunter, int rating);
		}
	}

	Aggregate Notification {
		Entity Notification {
			aggregateRoot
			-User user
			String theme
			String message
			Date createdAt
		}

		Service NotificationService {
			boolean Notify(@User user, String task, String message);
		}
	}

	Aggregate Task {
		Entity Task {
			aggregateRoot
			-ProductOwner po
			int reward
			int numberOfMeetings
			int numberOfHuntersRequired
			double ratingRequired
			Date deadline
			String descriptions
			-List<Tag> tags
			-List<Hunter> hunters
			-List<Hunter> huntersApplied
			-List<Question> questions
			String status
		}

		ValueObject Tag {
			String name
		}

		ValueObject Question {
			String question
			String answer nullable
		}

		Service TaskService {
		void createTask(@ProductOwner po,
			            String name,
						String descriptions,
                        String title,
                        Date deadline,
                        int reward,
                        int numberOfMeetings,
                        int numberOfHuntersRequired,
                        double ratingRequired,
                        List<String> tags);

    	List<@Task> findByFilter(String filter);
    	void applyToTask(@Task task, @Hunter hunter);
    	void acceptHunter(@Task task, @Hunter hunter);
		}
	}

	Aggregate Chat {
		Entity Chat {
			aggregateRoot
			-List<Message> messages
		}

		Entity Message {
			String sender
			String receiver
			String mensagem
			Date dataEnvio
			boolean isLida
			def void marcarComoLida();
		}

		Service MessageService {
			void enviarMensagem(String senderId, String receiverId, String mensagem);
		}
	}

	Service PaymentService {
		void Payment(@Task task);
	}
}

